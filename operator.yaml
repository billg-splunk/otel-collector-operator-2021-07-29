apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  namespace: openshift-operators
  name: splunk-otel-agent
spec:
  config: |
    extensions:
      health_check:
        endpoint: 0.0.0.0:13133
      zpages:
        endpoint: 0.0.0.0:55679
      http_forwarder:
        ingress:
          endpoint: 0.0.0.0:6060
        egress:
          endpoint: "https://api.${SPLUNK_REALM}.signalfx.com"
          headers:
            "X-SF-Token": "${SPLUNK_ACCESS_TOKEN}"
      smartagent:
        signalFxAccessToken: ${SPLUNK_ACCESS_TOKEN}
        etcPath: /hostfs/etc
        procPath: /hostfs/proc
        enableBuiltInFiltering: true
        intervalSeconds: 10
        disableHostDimensions: false

    # replace smartagent/ receivers with otel counter parts
    # where applicable e.g, smartagent/docker-container-stats
    # should be replaced with docker_stats from otel.
    receivers:
      # tracing/metric receiver
      smartagent/signalfx-forwarder:
        type: signalfx-forwarder
        defaultSpanTags:
          environment: ${MY_CLUSTER_NAME}

      # cluster monitors
      smartagent/openshift-cluster:
        type: openshift-cluster
        extraDimensions:
          metric_source: openshift-cluster
      smartagent/kubelet-metrics:
        type: kubelet-metrics
        kubeletAPI:
          authType: serviceAccount
          url: https://${MY_NODE_NAME}:10250
        usePodsEndpoint: true
        extraDimensions:
          metric_source: kubelet-metrics
      smartagent/kubernetes-apiserver:
        type: kubernetes-apiserver
        useHTTPS: true
        skipVerify: true
        host: apiserver.openshift-kube-apiserver
        port: 443
        useServiceAccount: true
        extraDimensions:
          metric_source: kubernetes-apiserver
      smartagent/kubernetes-scheduler:
        type: kubernetes-scheduler
        useHTTPS: true
        skipVerify: true
        host: scheduler.openshift-kube-scheduler
        port: 443
        useServiceAccount: true
        extraDimensions:
          metric_source: kubernetes-scheduler

      # host monitors
      smartagent/processlist:
        type: processlist
        extraDimensions:
            k8s.node.name: ${MY_NODE_NAME}
      smartagent/cpu:
        type: cpu
        extraDimensions:
            k8s.node.name: ${MY_NODE_NAME}
      smartagent/disk-io:
        type: disk-io
        extraDimensions:
            k8s.node.name: ${MY_NODE_NAME}
      smartagent/net-io:
        type: net-io
        extraDimensions:
            k8s.node.name: ${MY_NODE_NAME}
      smartagent/load:
        type: load
        extraDimensions:
            k8s.node.name: ${MY_NODE_NAME}
      smartagent/memory:
        type: memory
        extraDimensions:
            k8s.node.name: ${MY_NODE_NAME}
      smartagent/host-metadata:
        type: host-metadata
        extraDimensions:
            k8s.node.name: ${MY_NODE_NAME}
      smartagent/vmem:
        type: vmem
        extraDimensions:
            k8s.node.name: ${MY_NODE_NAME}
      smartagent/filesystems:
        type: filesystems
        extraDimensions:
            k8s.node.name: ${MY_NODE_NAME}
        hostFSPath: /hostfs
      smartagent/docker-container-stats:
        type: docker-container-stats
        dockerURL: unix:///hostfs/var/run/podman/podman.sock
        excludedImages:
        - '*pause-amd64*'
        - k8s.gcr.io/pause*
        labelsToDimensions:
          io.kubernetes.container.name: container_spec_name
          io.kubernetes.pod.name: kubernetes_pod_name
          io.kubernetes.pod.namespace: kubernetes_namespace
          io.kubernetes.pod.uid: kubernetes_pod_uid
        extraDimensions:
            k8s.node.name: ${MY_NODE_NAME}

    exporters:
      # Traces
      otlphttp:
        traces_endpoint: "https://ingest.${SPLUNK_REALM}.signalfx.com/v2/trace/otlp"
        compression: gzip
        headers:
          "X-SF-Token": "${SPLUNK_ACCESS_TOKEN}"
      # Metrics + Events
      signalfx:
        access_token: "${SPLUNK_ACCESS_TOKEN}"
        realm: "${SPLUNK_REALM}"

    processors:
      resourcedetection:
        detectors:
          - system
          - env
          # enable the relevant detectors
          #- gce
          #- ecs
          #- ec2
          #- azure
      k8s_tagger:
        extract:
          metadata:
            - k8s.namespace.name
            - k8s.node.name
            - k8s.pod.name
            - k8s.pod.uid
        filter:
          node: ${MY_NODE_NAME}
      resource/add_cluster_name:
        attributes:
          - action: upsert
            key: k8s.cluster.name
            value: ${MY_CLUSTER_NAME}
      metricstransform:
        transforms:
          - action: update
            include: .*
            match_type: regexp
            operations:
              - action: add_label
                new_label: kubernetes_cluster
                new_value: ${MY_CLUSTER_NAME}

    service:
      extensions: [health_check, zpages, http_forwarder, smartagent]
      pipelines:
        traces:
          receivers:
            - smartagent/signalfx-forwarder
          processors:
            - resourcedetection
            - k8s_tagger
            - resource/add_cluster_name
          exporters:
            - otlphttp
        metrics:
          receivers:
            - smartagent/signalfx-forwarder
            - smartagent/openshift-cluster
            - smartagent/kubelet-metrics
            - smartagent/kubernetes-apiserver
            - smartagent/kubernetes-scheduler

            # the following receivers are used to collecto host metrics.
            - smartagent/cpu
            - smartagent/disk-io
            - smartagent/net-io
            - smartagent/load
            - smartagent/memory
            - smartagent/host-metadata
            - smartagent/vmem
            - smartagent/docker-container-stats
            - smartagent/filesystems
          processors:
            - resourcedetection
            - metricstransform
            - k8s_tagger
            - resource/add_cluster_name
          exporters:
            - signalfx
        logs:
          receivers:
            - smartagent/processlist
          processors:
            - resourcedetection
            - k8s_tagger
            - resource/add_cluster_name
          exporters:
            - signalfx

  mode: daemonset
  env:
    - name: SPLUNK_REALM
      value: us1
    - name: SPLUNK_ACCESS_TOKEN
      valueFrom:
        secretKeyRef:
          name: splunk-otel-agent
          key: access-token
    - name: MY_CLUSTER_NAME
      value: <<< REPLACE_ME_WITH_THE_CLUSTER_NAME >>
    - name: MY_POD_NAME
      valueFrom:
        fieldRef:
          fieldPath: metadata.name
    - name: MY_NODE_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: spec.nodeName
    - name: MY_NODE_IP
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: status.hostIP
    - name: MY_NAMESPACE
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.namespace
  volumeMounts:
    - mountPath: /hostfs
      name: hostfs
      readOnly: true
      mountPropagation: HostToContainer
    - mountPath: /etc/passwd
      name: etc-passwd
      readOnly: true
  serviceAccount: splunk-otel-agent
  volumes:
    - name: hostfs
      hostPath:
        path: /
    - name: etc-passwd
      hostPath:
        path: /etc/passwd
  tolerations:
    - effect: NoSchedule
      key: node.alpha.kubernetes.io/role
      operator: Exists
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
      operator: Exists
  image: "quay.io/signalfx/splunk-otel-collector:0.29.0"
